import streamlit as st
import json
import torch
from sentence_transformers import SentenceTransformer, util
from pathlib import Path
import base64
import time
# === C·∫§U H√åNH ===
DATA_PATH = "answers.json"
BG_PATH = r"C:\Users\ximen\Downloads\image.jpg"
ICON_PATH = r"C:\Users\ximen\Downloads\chatbot.png"

st.set_page_config(page_title="üí¨ Chatbot To√°n R·ªùi R·∫°c", layout="wide")

# === LOAD D·ªÆ LI·ªÜU ===
@st.cache_resource
def load_data():
    try:
        with open(DATA_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
        questions, answers = list(data.keys()), list(data.values())
        model = SentenceTransformer("keepitreal/vietnamese-sbert")
        embeddings = model.encode(questions, convert_to_tensor=True)
        return model, questions, answers, embeddings
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu ho·∫∑c t·∫£i model: {e}")
        return None, [], [], None

def get_answer(query, model, questions, answers, embeddings):
    query_vec = model.encode(query, convert_to_tensor=True)
    scores = util.cos_sim(query_vec, embeddings)[0]
    top = torch.topk(scores, k=1)
    if float(top.values[0]) < 0.45:
        return "Xin l·ªói, m√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ c√¢u h·ªèi n√†y."
    return answers[int(top.indices[0])]

@st.cache_data
def load_b64(path):
    p = Path(path)
    if not p.exists():
        st.error(f"Kh√¥ng t√¨m th·∫•y file: {path}")
        return ""
    return base64.b64encode(p.read_bytes()).decode()

# === T·∫¢I T√ÄI NGUY√äN ===
model, questions, answers, embeddings = load_data()
bg_b64 = load_b64(BG_PATH)
icon_b64 = load_b64(ICON_PATH)

# === SESSION STATE ===
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "üëã Ch√†o b·∫°n! M√¨nh l√† Chatbot ‚Äì tr·ª£ l√Ω To√°n R·ªùi R·∫°c."}
    ]
if "show_chat" not in st.session_state:
    st.session_state.show_chat = False

# === CSS ===
st.markdown(f"""
<style>
.stApp {{
    background-image: url("data:image/jpg;base64,{bg_b64}");
    background-size: cover;
    background-position: center;
}}

/* ICON CHAT */
div[data-testid="stButton"] button {{
    position: fixed;
    bottom: 30px;
    right: 30px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    border: none;
    background-image: url("data:image/png;base64,{icon_b64}");
    background-size: cover;
    cursor: pointer;
    z-index: 2000;
    display: block;
}}

/* KHUNG CHAT */
.chat-container {{
    position: fixed;
    bottom: 70px;
    right: 30px;
    width: 400px;
    max-height: 60vh;
    overflow-y: auto;
    padding: 10px;
    background-color: rgba(255,255,255,0.9);
    border-radius: 10px;
    z-index: 1500;
}}

/* MESSAGE BUBBLE */
.msg-left {{ display: flex; justify-content: flex-start; margin-bottom: 10px; padding-left: 5px; }}
.msg-right {{ display: flex; justify-content: flex-end; margin-bottom: 10px; padding-right: 5px; margin-right: -3px; }} /* ƒê√É CH·ªàNH S·ª¨A: Th√™m margin-right: -3px ƒë·ªÉ d·ªãch chuy·ªÉn tin nh·∫Øn ng∆∞·ªùi d√πng */

.msg-bubble {{ max-width: 70%; padding: 10px 15px; border-radius: 20px; word-wrap: break-word; }}
.msg-left .msg-bubble {{ background-color: #f1f0f0; color: #111; }}
.msg-right .msg-bubble {{ background-color: #0084ff; color: white; }}

/* INPUT C·ªê ƒê·ªäNH D∆Ø·ªöI M√ÄN H√åNH */
.chat-input-container {{
    position: fixed;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 400px;
    display: flex;
    gap: 8px;
    padding: 10px;
    background-color: white;
    border-top: 1px solid #ddd;
    z-index: 1500;
}}
.chat-input-container input {{
    flex: 1;
    border-radius: 20px;
    border: 1px solid #ccc;
    padding: 10px 15px;
}}
.chat-input-container input:focus {{
    border-color: #0084ff;
    background-color: white;
}}
.chat-input-container button {{
    background-color: #0084ff;
    color: white;
    border: none;
    border-radius: 20px;
    padding: 10px 15px;
}}
.chat-input-container button:hover {{
    background-color: #006bbf;
}}
</style>
""", unsafe_allow_html=True)

# === ICON TRIGGER ===
if st.button("", key="chat_icon"):
    st.session_state.show_chat = not st.session_state.show_chat

# === HI·ªÇN TH·ªä CHAT + INPUT ===
if st.session_state.show_chat:
    # --- CHAT ---
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    for msg in st.session_state.messages:
        if msg["role"] == "user":
            st.markdown(f'<div class="msg-right"><div class="msg-bubble">{msg["content"]}</div></div>', unsafe_allow_html=True)
        else:
            st.markdown(f'<div class="msg-left"><div class="msg-bubble">{msg["content"]}</div></div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

    # --- INPUT FORM ---
    with st.form(key="chat_form", clear_on_submit=True):
        st.markdown('<div class="chat-input-container">', unsafe_allow_html=True)
        cols = st.columns([4,1])
        with cols[0]:
            user_query = st.text_input("", key="user_input_text", label_visibility="collapsed")
        with cols[1]:
            is_send = st.form_submit_button("G·ª≠i")
        st.markdown('</div>', unsafe_allow_html=True)

        if is_send and user_query:
            # B·∫≠t chat hi·ªÉn th·ªã lu√¥n khi g·ª≠i
            st.session_state.show_chat = True

            # Th√™m message user
            st.session_state.messages.append({"role": "user", "content": user_query})

            # L·∫•y c√¢u tr·∫£ l·ªùi
            if embeddings is not None:
                ans = get_answer(user_query, model, questions, answers, embeddings)
                st.session_state.messages.append({"role": "assistant", "content": ans})
            else:
                st.session_state.messages.append({"role": "assistant", "content": "Model ch∆∞a ƒë∆∞·ª£c t·∫£i."})
