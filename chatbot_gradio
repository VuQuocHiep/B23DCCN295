import gradio as gr
import time
import json
from rag_module import get_answer, save_new_qa, reset_data

CHAT_HISTORY_PATH = "chat_history.json"
DATA_PATH = "answers.json"

# --- L∆∞u & load chat ---
def save_chat_history(chat_history, file_path=CHAT_HISTORY_PATH):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(chat_history, f, ensure_ascii=False, indent=4)

def load_chat_history(file_path=CHAT_HISTORY_PATH):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

# --- Hi·ªáu ·ª©ng g√µ ch·ªØ ---
def typewriter_effect(text):
    result = ""
    for ch in text:
        result += ch
        time.sleep(0.015)
        yield result

# --- CSS gi·ªØ nguy√™n nh∆∞ng c·∫≠p nh·∫≠t n√∫t dark/light ---
custom_css = """
.message.user { ... }
.message.assistant { ... }

/* N√∫t dark/light üåô */
#toggle-btn {
    position: fixed;        
    top: 10px;               
    right: 10px;            
    z-index: 9999;
    background-color: #f0f0f0;
    color: #333;
    border: none;
    border-radius: 50%;
    width: 50px;            
    height: 50px;           
    font-size: 22px;        
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    transition: background-color 0.3s ease, transform 0.2s ease;
}

#toggle-btn:hover { 
    transform: scale(1.1); 
}

body.dark-mode #toggle-btn { 
    background-color: #333; 
    color: #f5f5f5; 
}
"""

# --- JS toggle dark mode gi·ªØ nguy√™n ---
toggle_js = """
<script>
let isDark = false;
function toggleTheme() {
  isDark = !isDark;
  if (isDark) {
    document.body.classList.add('dark-mode');
  } else {
    document.body.classList.remove('dark-mode');
  }
}
</script>
"""

with gr.Blocks(css=custom_css, theme=gr.themes.Soft()) as demo:
    gr.HTML(toggle_js)
    gr.HTML("<button id='toggle-btn' onclick='toggleTheme()'>üåô</button>")
    gr.Markdown("## üí¨ Chatbot To√°n R·ªùi R·∫°c 2 ‚Äî PTIT Assistant")

    # --- Chatbot ch√≠nh ---
    chatbot_history = load_chat_history()
    chatbot = gr.Chatbot(type="messages", height=420, value=chatbot_history)

    with gr.Row():
        msg = gr.Textbox(
            placeholder="Nh·∫≠p c√¢u h·ªèi To√°n R·ªùi R·∫°c...",
            show_label=False,
            lines=1,
            max_lines=3,
            scale=4
        )
        with gr.Row():
            with gr.Column():
                send_btn = gr.Button("üì§ G·ª≠i", scale=1)
            with gr.Column():
                clear_btn = gr.Button("üßπ X√≥a", scale=1)

        with gr.Row():
            with gr.Column():
                reset_btn = gr.Button("üîÑ Reset", scale=1)
            with gr.Column():
                view_history_btn = gr.Button("üìú Xem l·ªãch s·ª≠ chat c≈©", scale=1)

    old_chat_display = gr.Textbox(
        label="L·ªãch s·ª≠ chat c≈©",
        lines=10,
        interactive=False,
        visible=False
    )

    unknown_question = gr.State("")

    # --- Ph·∫£n h·ªìi chatbot ---
    def respond(message, chat_history, unknown_q):
        if not message.strip():
            return "", chat_history, unknown_q

        if unknown_q:
            chat_history.append({"role": "user", "content": message})
            save_new_qa(unknown_q, message, DATA_PATH)
            chat_history.append({"role": "assistant", "content": ""})
            text_to_show = f"C·∫£m ∆°n! M√¨nh ƒë√£ h·ªçc xong c√¢u tr·∫£ l·ªùi m·ªõi: {message}"
            for partial in typewriter_effect(text_to_show):
                chat_history[-1]["content"] = partial
                yield "", chat_history, ""
            unknown_q = ""
            save_chat_history(chat_history)
            return

        chat_history.append({"role": "user", "content": message})
        reply = get_answer(message)

        if reply == "Xin l·ªói, m√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ c√¢u h·ªèi n√†y.":
            unknown_q = message
            chat_history.append({"role": "assistant", "content": "M√¨nh ch∆∞a bi·∫øt c√¢u n√†y. B·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt c√¢u tr·∫£ l·ªùi kh√¥ng?"})
            save_chat_history(chat_history)
            yield "", chat_history, unknown_q
            return

        chat_history.append({"role": "assistant", "content": ""})
        for partial in typewriter_effect(reply):
            chat_history[-1]["content"] = partial
            yield "", chat_history, unknown_q

        save_chat_history(chat_history)

    # --- S·ª± ki·ªán ---
    msg.submit(respond, [msg, chatbot, unknown_question], [msg, chatbot, unknown_question])
    send_btn.click(respond, [msg, chatbot, unknown_question], [msg, chatbot, unknown_question])
    clear_btn.click(lambda: [], None, chatbot, queue=False)

    # --- Reset d·ªØ li·ªáu nh∆∞ng gi·ªØ chat ---
    def reset_and_notify(chat_history):
        reset_data()  # reset file JSON + embeddings
        chat_history.append({
            "role": "assistant",
            "content": "M√¨nh ƒë√£ x√≥a t·∫•t c·∫£ nh·ªØng g√¨ ƒë√£ h·ªçc!"
        })
        save_chat_history(chat_history)
        return chat_history

    reset_btn.click(reset_and_notify, inputs=[chatbot], outputs=[chatbot])

    # --- Hi·ªÉn th·ªã l·ªãch s·ª≠ chat c≈© ---
    def show_old_chat():
        history = load_chat_history()
        display_text = ""
        for msg in history:
            role = "B·∫°n" if msg['role'] == 'user' else "Bot"
            display_text += f"{role}: {msg['content']}\n"
        return gr.update(value=display_text, visible=True)

    view_history_btn.click(show_old_chat, inputs=[], outputs=[old_chat_display])

demo.launch()
