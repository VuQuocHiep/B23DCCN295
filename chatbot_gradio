import gradio as gr
import time
from rag_module import get_answer, save_new_qa

DATA_PATH = "answers.json"

# === HI·ªÜU ·ª®NG G√ï CH·ªÆ ===
def typewriter_effect(text):
    result = ""
    for ch in text:
        result += ch
        time.sleep(0.015)
        yield result

# === CSS gi·ªØ nguy√™n + b·ªï sung ===
custom_css = """
body {
    background-color: #ffffff;
    color: #000000;
    transition: background-color 0.3s ease, color 0.3s ease;
}
body.dark-mode {
    background-color: #1f1f1f;
    color: #ffffff;
}
.message.user {
    background-color: #DCF8C6 !important;
    color: #000 !important;
    border-radius: 12px !important;
    padding: 8px 12px !important;
}
.message.assistant {
    background-color: #E8EAF6 !important;
    color: #000 !important;
    border-radius: 12px !important;
    padding: 8px 12px !important;
}
body.dark-mode .message.user {
    background-color: #2e7d32 !important;
    color: #fff !important;
}
body.dark-mode .message.assistant {
    background-color: #3949ab !important;
    color: #fff !important;
}
#toggle-btn {
    position: fixed;
    top: 15px;
    right: 20px;
    z-index: 9999;
    background-color: #f0f0f0;
    color: #333;
    border: none;
    border-radius: 50%;
    width: 35px;
    height: 35px;
    font-size: 16px;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    transition: background-color 0.3s ease, transform 0.2s ease;
}
#toggle-btn:hover { transform: scale(1.1); }
body.dark-mode #toggle-btn { background-color: #333; color: #f5f5f5; }

#input-msg textarea {
    font-size: 16px;
    padding: 8px 12px;
}
"""

# === JS toggle dark mode ===
toggle_js = """
<script>
let isDark = false;
function toggleTheme() {
  isDark = !isDark;
  if (isDark) {
    document.body.classList.add('dark-mode');
  } else {
    document.body.classList.remove('dark-mode');
  }
}
</script>
"""

# === Giao di·ªán Gradio ===
with gr.Blocks(css=custom_css, theme=gr.themes.Soft()) as demo:
    gr.HTML(toggle_js)
    gr.HTML("<button id='toggle-btn' onclick='toggleTheme()'>üåô</button>")

    gr.Markdown("## üí¨ Chatbot To√°n R·ªùi R·∫°c ‚Äî PTIT Assistant")

    chatbot = gr.Chatbot(type="messages", height=420)

    # --- Row nh·∫≠p c√¢u h·ªèi + n√∫t ---
    with gr.Row():
        msg = gr.Textbox(
            placeholder="Nh·∫≠p c√¢u h·ªèi To√°n R·ªùi R·∫°c...",
            show_label=False,
            lines=1,
            max_lines=3,
            elem_id="input-msg",
            scale=4
        )
        send_btn = gr.Button("üì§ G·ª≠i", scale=1)
        clear_btn = gr.Button("üßπ X√≥a", scale=1)

    # State l∆∞u c√¢u h·ªèi ch∆∞a bi·∫øt
    unknown_question = gr.State("")


    def respond(message, chat_history, unknown_q):
        if not message.strip():
            return "", chat_history, unknown_q

        # N·∫øu ƒëang ch·ªù c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi tr∆∞·ªõc
        if unknown_q:
            # append tin nh·∫Øn ng∆∞·ªùi d√πng
            chat_history.append({"role": "user", "content": message})
            # l∆∞u c√¢u tr·∫£ l·ªùi v√†o JSON
            save_new_qa(unknown_q, message, DATA_PATH)
            # append assistant v·ªõi hi·ªáu ·ª©ng g√µ ch·ªØ
            chat_history.append({"role": "assistant", "content": ""})
            text_to_show = f"C·∫£m ∆°n! M√¨nh ƒë√£ h·ªçc xong c√¢u tr·∫£ l·ªùi m·ªõi: {message}"
            for partial in typewriter_effect(text_to_show):
                chat_history[-1]["content"] = partial
                yield "", chat_history, ""
            unknown_q = ""
            return

        chat_history.append({"role": "user", "content": message})
        reply = get_answer(message)

        if reply == "Xin l·ªói, m√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ c√¢u h·ªèi n√†y.":
            unknown_q = message
            chat_history.append(
                {"role": "assistant", "content": "M√¨nh ch∆∞a bi·∫øt c√¢u n√†y. B·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt c√¢u tr·∫£ l·ªùi kh√¥ng?"})
            yield "", chat_history, unknown_q
            return

        chat_history.append({"role": "assistant", "content": ""})
        for partial in typewriter_effect(reply):
            chat_history[-1]["content"] = partial
            yield "", chat_history, unknown_q


    # === S·ª± ki·ªán ===
    msg.submit(respond, [msg, chatbot, unknown_question], [msg, chatbot, unknown_question])
    send_btn.click(respond, [msg, chatbot, unknown_question], [msg, chatbot, unknown_question])
    clear_btn.click(lambda: [], None, chatbot, queue=False)

demo.launch()
