import gradio as gr
from rag_module import get_answer, save_new_qa
import time

# === HI·ªÜU ·ª®NG G√ï CH·ªÆ ===
def typewriter_effect(text):
    result = ""
    for ch in text:
        result += ch
        time.sleep(0.015)
        yield result

# === CSS ===
custom_css = """
body {
    background-color: #ffffff;
    color: #000000;
    transition: background-color 0.3s ease, color 0.3s ease;
}
body.dark-mode {
    background-color: #1f1f1f;
    color: #ffffff;
}
.message.user {
    background-color: #DCF8C6 !important;
    color: #000 !important;
    border-radius: 12px !important;
    padding: 8px 12px !important;
}
.message.assistant {
    background-color: #E8EAF6 !important;
    color: #000 !important;
    border-radius: 12px !important;
    padding: 8px 12px !important;
}
body.dark-mode .message.user {
    background-color: #2e7d32 !important;
    color: #fff !important;
}
body.dark-mode .message.assistant {
    background-color: #3949ab !important;
    color: #fff !important;
}
#toggle-btn {
    position: fixed;
    top: 15px;
    right: 20px;
    z-index: 9999;
    background-color: #f0f0f0;
    color: #333;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 18px;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    transition: background-color 0.3s ease, transform 0.2s ease;
}
#toggle-btn:hover { transform: scale(1.1); }
body.dark-mode #toggle-btn { background-color: #333; color: #f5f5f5; }
"""

# === JS DARK MODE ===
toggle_js = """
<script>
let isDark = false;
function toggleTheme() {
  isDark = !isDark;
  if (isDark) {
    document.body.classList.add('dark-mode');
  } else {
    document.body.classList.remove('dark-mode');
  }
}
</script>
"""

# === GIAO DI·ªÜN ===
with gr.Blocks(css=custom_css, theme=gr.themes.Soft()) as demo:
    gr.HTML(toggle_js)
    gr.HTML("<button id='toggle-btn' onclick='toggleTheme()'>üåô</button>")

    gr.Markdown("## üí¨ Chatbot To√°n R·ªùi R·∫°c ‚Äî PTIT Assistant")

    chatbot = gr.Chatbot(type="messages", height=420, show_copy_button=True)

    with gr.Row():
        msg = gr.Textbox(placeholder="Nh·∫≠p c√¢u h·ªèi To√°n R·ªùi R·∫°c...", autofocus=True, scale=8)
        send_btn = gr.Button("üì§ G·ª≠i", scale=1)
        clear_btn = gr.Button("üßπ X√≥a", scale=1)

    # State t·∫°m cho c√¢u h·ªèi ch∆∞a bi·∫øt
    unknown_question = gr.State(value="")

    # === H√ÄM PH·∫¢N H·ªíI ===
    def respond(message, chat_history, unknown_q):
        if not message.strip():
            return "", chat_history, unknown_q

        chat_history.append({"role": "user", "content": message})
        reply = get_answer(message)

        if reply == "Xin l·ªói, m√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ c√¢u h·ªèi n√†y.":
            # L∆∞u c√¢u h·ªèi ch∆∞a bi·∫øt
            unknown_q = message
            chat_history.append({"role": "assistant", "content": reply + " B·∫°n c√≥ th·ªÉ d·∫°y m√¨nh c√¢u tr·∫£ l·ªùi kh√¥ng?"})
            return "", chat_history, unknown_q

        # Bi·∫øt c√¢u tr·∫£ l·ªùi
        chat_history.append({"role": "assistant", "content": ""})
        for partial in typewriter_effect(reply):
            chat_history[-1]["content"] = partial
            yield "", chat_history, unknown_q

    # === H√ÄM L∆ØU C√ÇU TR·∫¢ L·ªúI M·ªöI ===
    def save_answer(new_answer, chat_history, unknown_q):
        if unknown_q and new_answer.strip():
            save_new_qa(unknown_q, new_answer)
            chat_history.append({"role": "assistant", "content": "C·∫£m ∆°n! M√¨nh ƒë√£ ghi nh·ªõ c√¢u tr·∫£ l·ªùi m·ªõi."})
        return "", chat_history, ""

    # === S·ª∞ KI·ªÜN ===
    msg.submit(respond, [msg, chatbot, unknown_question], [msg, chatbot, unknown_question])
    send_btn.click(respond, [msg, chatbot, unknown_question], [msg, chatbot, unknown_question])

    # N·∫øu ng∆∞·ªùi d√πng nh·∫≠p c√¢u tr·∫£ l·ªùi m·ªõi cho chatbot
    msg.submit(save_answer, [msg, chatbot, unknown_question], [msg, chatbot, unknown_question])

    clear_btn.click(lambda: [], None, chatbot)

# === CH·∫†Y ===
if __name__ == "__main__":
    demo.launch()
